<?xml version="1.0"?>
<doc>
<remarkss>

<remarks name="TestFixtureAttribute">
<para><em>Implements:</em> Simple Test Pattern</para>
<para><em>Login:</em>
<code>
[SetUp] 
{Test} 
[TearDown]
</code>
</para>
<para>
This is the classic unit test fixture attribute. It defines a class that contains unit
tests.
</para>
<para>
The test execution logic is described by the following sequence of custom attributes:
where <c>[]</c> denotes an optional attribute, <c>{}</c> denotes a custom attribute
that can tag multiple number of methods.
</para>
<para>
Unit test methods must be tagged with the <see cref="TestFixtureAttribute"/>, return
<c>void</c> and take no arguments:
<code>
[Test]
public void UnitTest()
{
   ...
}
</code>
The same fixture can hold an arbitrary number of unit test methods.
</para>
<para>
If the fixture needs initilization, you can add a set up method tagged with the
<see cref="SetUpAttribute"/> attribute. Note that there can be only one 
method tagged with <see cref="SetUpAttribute"/>.
</para>
<para>
Symmetricaly, you can specify a method that will clean up resources allocated by
the fixture. This method must be tagged with the <see cref="TearDownAttribute"/>
and there can be only one method with this attribute.
</para>
</remarks>
<remarks name="TypeFixtureAttribute">
<para><em>Implements:</em> Type Test Pattern</para>
<para><em>Logic:</em>
<code>
{Provider}
[SetUp]
{Test}
[TearDown]
</code>
</para>
<para>
This fixture is quite similar to the <b>Simple Test</b> pattern, but it applies to
any instance of a particular type provided by the user.
</para>
<para>
The test fixture first looks for methods tagged with the <see cref="ProviderAttribute"/>
method. These method must return an object assignable with the tested type. This instance will
be feeded to the other methods of the fixture.
</para>
</remarks>

<remarks name="EnumerationFixtureAttribute">
<para><em>Implements:</em>Enumeration Test Pattern</para>
<para><em>Login:</em>
<code>
{DataProvider}
{CopyToProvider}
[SetUp] 
(EnumerationTester)
    - GetEnumerator
    - Enumerate
    - ElementWiseEquality
    - Current
    - CurrentWithoutMoveNet
    - CurrentPastEnd
    - Reset
    - CollectionChanged 
[TearDown]
</code>
</para>
<para>
This example tests the <seealso cref="IEnumerable"/> and <seealso cref="IEnumerator"/>.
</para>
</remarks>

<remarks name="CollectionSortFixtureAttribute">
<para><em>Implements:</em> Collection Order Pattern</para>
<para><em>Logic:</em>
<code>
{Provider}
[SetUp]
{Fill}
(Order)  // internal
[TearDown]
</code>
</para>
<para>
This fixture tests sorted collections. The user must provider a
comparer and the type of desired test based on the <see cref="CollectionOrderTest"/>
enumeration: ascending, descending.
</para>
<para>
Tested collections are provided by methods tagged with the <see cref="ProviderAttribute"/>
attribute. The collection are then filled using methods tagged by the 
<see cref="FillAttribute"/> attribute. The rest of the tests is handled by the framework.
</para>
<para>
SetUp and TearDown methods can be added to set up the fixtue object.
</para>
</remarks>
<remarks name="CollectionIndexingFixtureAttribute">
<para>
The <see cref="CollectionIndexingFixtureAttribute"/> implements the <b>Collection Indexing Pattern</b>.
</para>
<para>
The user provides filled collection, index type and index range through
the <see cref="IndexerProviderAttribute"/> attribute.
</para>
</remarks>
</remarkss>

<summaries>
<summary name="MbUnit.Framework">
<para>
The <b>MbUnit.Framework</b> contains fixture that implement <b>Unit Test Patterns</b> 
as defined in the Marc Clifton article.
</para>
</summary>
</summaries>

<examples>
<example name="GraphicsBitmap">
<para>
This example shows a test fixture class implementing the <b>Simple Test pattern</b>.
It tests image based method of the Graphics class in GDI+. 
</para>
<para>
A set up method
(tagged by <see cref="SetUpAttribute"/> is used to create a new bitmap, while
a tear down (tagged by <see cref="TearDownAttribute"/>) is used to released the bitmap.
</para>
<code id="ex_bitmap" compilable="true">
[TestFixture("Bitmap")]
public GraphicsAndBitmapTest
{
    private Bitmap bmp;
    
    [SetUp]
    public void SetUp()
    {
       this.bmp = new Bitmap(300,300);
    }
    
    [Test]
    public void CreateGraphics()
    {
    	Graphics g = Graphcis.FromImage(this.bmp);
    	Assert.IsNotNull(g);
    	Assert.AreEqual(g.Width,this.bmp.Width);
    	...
    }
    
    ...
    
    [TearDown]
    public void TearDownCanHaveOtherNames()
    {
    	if(this.bmp!=null)
	    	this.bmp.Dispose();
    }
}
</code>
</example>
<example name="IDictionary">
<para>
This example shows the squeleton of a fixture tests the <b>IDictionary</b> interface,
the fixture implements the <b>Type Test</b> pattern.
</para>
<para>
The tested instances are feeded by the methods tagged with the <see cref="ProviderAttribute"/>.
These methods must return an instance that is assignable with <see cref="IDictionary"/>.
Subsequent will receive the created instance as parameter.
</para>
<code id="ex_dictionary" compilable="true">
[TypeFixture(typeof(IDictionary),"IDictionary interface fixture")]
public void DictionaryTest
{
    [Provider(typeof(Hashtable))]
    public Hashtable ProvideHashtable()
    {
    	return  new Hashtable();
    }

    [Provider(typeof(SortedList))]
    public SortedList ProvideSortedList()
    {
    	return  new SortedList();
    }
    
    // tests
    [Test]
    [ExpectedException(typeof(ArgumentException))]
    public void AddDuplicate(IDictionary dic) // dic comes from a provider class
    {
		dic.Add("key",null);
		dic.Add("key",null); // boom
    }

}
</code>
</example>
<example name="Indexing">
<para>
This example checks the Collection Indexing Pattern for the <see cref="ArrayList"/>
and <see cref="Array"/> collections:
</para>
<code id="ex_indexing" compilable="true"><![CDATA[
[CollectionIndexingFixture]
public class CollectionIndexingFixtureAttributeTest
{		
    [IntIndexerProvider(typeof(ArrayList),100)]
    public ArrayList ProvideArrayList100()
    {
        ArrayList list = new ArrayList();
        for(int i =0;i<100;++i)
            list.Add(i);	 	
		 	
        return list;
    }
		 
    [IntIndexerProvider(typeof(Array),10)]
    public ArrayList ProvideArrayList()
    {
        ArrayList list = new ArrayList();
        for(int i=0;i<10;++i)
            list.Add(i);
		 	
        return list;
    }
}
]]>
</code>
</example>
<example name="DbSequence">
<para>
This is the example for the <a href="http://www.codeproject.com/csharp/autp3.asp">CodeProject</a> 
article adapted to MbUnit.
</para>
<code>
<b>[ProcessTestFixture]</b>
public class POSequenceTest
{	
	...
	<b>[TestSequence(1)]</b>
	public void POConstructor()
	{
		po=new PurchaseOrder();
		Assert.AreEqual(po.Number,"", "Number not initialized.");
		Assert.AreEqual(po.PartCount,0, "PartCount not initialized.");
		Assert.AreEqual(po.ChargeCount,0, "ChargeCount not initialized.");
		Assert.AreEqual(po.Invoice,null, "Invoice not initialized.");
		Assert.AreEqual(po.Vendor,null, "Vendor not initialized.");
	}

	[TestSequence(2)]
	public void VendorConstructor()
	{
		vendor=new Vendor();
		Assert.AreEqual(vendor.Name,"", "Name is not an empty string.");
		Assert.AreEqual(vendor.PartCount,0, "PartCount is not zero.");
	}
	...
</code>
<para>
Use <see cref="ProcessTestFixtureAttribute"/> to mark a class as process test fixture and use the 
<see cref="TestSequenceAttribute"/> attribute to create the order of the process. The fixture also supports
SetUp and TearDown methods.
</para>
</example>
</examples>
</doc>
