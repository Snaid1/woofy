:title The structure of a comic definition

A comic definition consists of a single xml file, describing how Woofy should visit and download the comic, and it looks kinda like the following fragment:

:div code
<comicInfo friendlyName="...">~~ 
____<startUrl><![CDATA[...]]></startUrl>~~ 
____<firstIssue><![CDATA[...]]></firstIssue>~~ 
____<comicRegex><![CDATA[...]]></comicRegex>~~ 
____<backButtonRegex><![CDATA[...]]></backButtonRegex>~~ 
</comicInfo>
:/div

Note that each xml element wraps its content in a [[http://en.wikipedia.org/wiki/Cdata|CDATA]] region. This is because the content might contain angle brackets, and those would break the xml markup.

Anyways, let's take each of these elements (and the one attribute) for a spin and see what they do:

* friendlyName - the comic's name, the one that Woofy will display in the comics list;
* startUrl - the url at which to start looking for strips; it will usually be the comic's start page;
* firstIssue - this is the url to the comic's very first issue; Woofy will not consider this element, but it's being used in the automated tests, in order to determine whether Woofy can visit all the pages for that comic or it gets stuck somewhere; setting it is recommended.
* comicRegex - this is where it gets interesting; in order to be able to retrieve a strip's link from a page, Woofy needs to know how the link looks like, so we describe it, using .NET [[http://en.wikipedia.org/wiki/Regular_expressions|regular expressions]];
* backButtonRegex - a regular expression describing how the link to the previous page looks like.

Note that the **comicRegex** and **backButtonRegex** elements allow the use of two grouping constructs: 
* content - used to wrap the actual link in a wider expression;
* contentToBeMerged - used to wrap a fragment of the desired link; the fragment will be merged with the **startUrl** attribute, in order to obtain the full link.

You should use both grouping constructs in the same expression.